
name: CICD Pipeline

on:
  push:
    branches: [ "main" ]
jobs:
  build:

    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn package --file pom.xml

    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v4.3.3
      with:
    # Artifact name
        name: boardgame
        path: target/*.jar

    - name: TRIVY FS SCAN
      run: |
        trivy fs --format table -o trivy-fs-report.html  .

    - name: SonarQube Scan
      uses: SonarSource/sonarqube-scan-action@v2.0.2
      env:
        SONAR_TOKEN: ${{secrets.SONAR_TOKEN}}
        SONAR_HOST_URL: ${{secrets.SONAR_HOST_URL}}

    - name: Install jq
      run: sudo apt-get update && sudo apt-get install -y jq

    - name: SonarQube Quality Gate Check
      id: sonarqube-quality-gate-check
      uses: SonarSource/sonarqube-quality-gate-action@v1.1.0
      #force to fail after specific time
      timeout-minutes: 5
      env:
        SONAR_TOKEN: ${{secrets.SONAR_TOKEN}}
        SONAR_HOST_URL: ${{secrets.SONAR_HOST_URL}}

    - name: Docker Setup QEMU
      uses: docker/setup-qemu-action@v3.0.0

    - name: Setup Docker buildX
      uses: docker/setup-buildx-action@v3.3.0

    - name: Build Docker Image
      run: |
        docker build -t meka124/boardgame:latest  .

    - name: Trivy Image scan
      run: |
        trivy image --format table -o trivy-image-report.html meka124/boardgame:latest

    - name: Docker login
      uses: docker/login-action@v3.1.0
      with:
         username: ${{secrets.DOCKERHUB_USERNAME}}
         password: ${{secrets.DOCKERHUB_TOKEN}}

    - name: Docker Push
      run: |
        docker push meka124/boardgame:latest

    - name: Kubectl Action
      uses: tale/kubectl-action@v1
      with: 
        base64-kube-config: ${{secrets.KUBE_CONFIG}}
    - run: |
          kubectl apply -f deployment-service.yaml -n webapps
          kubectl get svc -n webapps 
        
    
